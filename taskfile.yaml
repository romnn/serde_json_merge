version: "3"
tasks:
  default:
    cmds:
      - task: check

  # run:
  #   ignore_error: true
  #   interactive: true
  #   cmds:
  #     - cargo run -p bumpversion-cli --bin bumpversion -- {{.CLI_ARGS}}
  #
  # run:cargo:
  #   ignore_error: true
  #   interactive: true
  #   cmds:
  #     - cargo run -p bumpversion-cli --bin cargo-bumpversion -- {{.CLI_ARGS}}

  bench:
    desc: "run benchmark suite"
    cmds:
      - cargo criterion --features full {{.CLI_ARGS}}

  docs:
    desc: "open documentation preview"
    env:
      RUSTDOCFLAGS: "--cfg docsrs"
    cmds:
      - cargo +nightly doc --all-features {{.CLI_ARGS}}

  build:
    desc: "build all targets"
    cmds:
      - cargo build --all-targets {{.CLI_ARGS}}

  build:release:
    desc: "build all targets in release mode"
    cmds:
      - cargo build --all-targets --release {{.CLI_ARGS}}

  typos:
    desc: "check repository for typos"
    aliases: [spellcheck]
    cmds:
      - typos

  check:
    desc: "check cargo workspace"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - cargo check --workspace --all-targets {{.CLI_ARGS}}

  check:fc:
    desc: "check cargo workspace for all combinations of features"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - cargo fc check --workspace --all-targets {{.CLI_ARGS}}

  clean:
    cmds:
      - cargo clean {{.CLI_ARGS}}

  outdated:
    desc: "check for outdated cargo workspace dependencies"
    cmds:
      - cargo outdated --workspace --ignore-external-rel --exit-code 1 -v {{.CLI_ARGS}}

  audit:
    desc: "audit cargo workspace dependencies"
    cmds:
      - cargo audit {{.CLI_ARGS}}

  format:
    desc: "format cargo workspace"
    cmds:
      - cargo fmt {{.CLI_ARGS}}

  test:
    desc: "test cargo workspace"
    cmds:
      - cargo test --workspace --all-targets {{.CLI_ARGS}}

  test:fc:
    desc: "test cargo workspace for all combinations of features"
    cmds:
      - cargo fc test --workspace --all-targets {{.CLI_ARGS}}

  lint:
    desc: "lint cargo workspace"
    cmds:
      # prettier-ignore
      - >-
        cargo clippy
        --tests --benches --examples --all-features
        -- -Dclippy::all -Dclippy::pedantic {{.CLI_ARGS}}

  lint:fc:
    desc: "lint cargo workspace for all combinations of features"
    cmds:
      # prettier-ignore
      - >-
        cargo fc clippy
        --tests --benches --examples --all-features
        -- -Dclippy::all -Dclippy::pedantic {{.CLI_ARGS}}

  lint:fix:
    desc: "lint and fix cargo workspace"
    alias: [fix]
    cmds:
      # prettier-ignore
      - >-
        cargo clippy
        --fix --allow-dirty --allow-staged
        --tests --benches --examples --all-features
        -- -Dclippy::all -Dclippy::pedantic {{.CLI_ARGS}}
